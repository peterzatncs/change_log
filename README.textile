h1. Change Log

A gem to keep all changes about the data in database.
It automatically saves who made the changes at what time and what has been changed.
You can choose to skip the column which you do not want to keep change logs.
For example: 'updated_at', 'created_at' and 'password' etc.

* Note: 
        Use Change Log version 1.0.5 if your application is using Rails 2.x.

h2. Install Change Log Gem

1. by command:
<pre><code># gem install change_log</code></pre>


2. or by bundler:
<pre><code># Gemfile in your application
gem 'change_log'
</code></pre>

Then:
<pre><code>bundle install</code></pre>

3. Create a table to keep all changes

    Generate a migration file similar to this:

<pre><code>
    class AddChangeLog < ActiveRecord::Migration
      def self.up
        create_table :change_logs do |t|       # feel free to choose another table name
         t.integer :version, :null=>false      # store version of each change
         t.string :record_id,:limit=>30        # store the actual record id 
         t.string :table_name, :limit=>60      # store the table name 
         t.string :attribute_name,:limit=>60   # store the column name
         t.string :user, :limit=>20            # store the user who made the change
         t.string :action, :limit=>6           # store the change action: create, read, update, delete
         t.text :old_value                     # the value before change
         t.text :new_value                     # value after change
         t.string :field_type, :limit=>30      # the column type eg. date, text, varchar, int etc
         t.timestamps
        end
      end

      def self.down
        drop_table :change_logs
      end
    end
</code></pre>

Then:
<pre><code>rake db:migrate</code></pre> 

h2. Use Change Log Gem

    1. *Add current_user Method in application_controller.rb*

This method will tell change_log who is the current user
<pre><code>
def current_user 
  return session[:user] # replace this with your own code
end
</code></pre>

    2. *ActiveRecord Models*
Enable change_log for Active Record Model, 
just put following line in very beginning of model file.
<pre><code>
enable_change_log :ignore=>[:updated_at]    
</code></pre>

Put any columns you do not want to keep in the change log table in :ignore option.
eg. the password hash

Then the system should record every changes the user made to change_log table.
If you are making changes within Model file:
    For Example: 
<pre><code># this is a model file
def making_some_changes
  user = User.first
  user.email = 'peterz@ncs.co.nz'
  user.save
end
</code></pre>

An attribute called 'whodidit' is automatically available.
So if you want to keep the changes in this scenario, do following:
<pre><code># this is a model file
def making_some_changes
  user = User.first
  user.email = 'peterz@ncs.co.nz'
  user.whodidit = 'Peter'
  user.save
end
</code></pre>

    3.  *About the ChangeLogs Model*
ChangeLogs model is core ActiveRecord model used by change_log gem.

You can use it directly in your model, controller even in helper.

For example:
<pre><code># List all changes
ChangeLogs.all</code></pre>

<pre><code># List all changes made by user 'peterz'
ChangeLogs.where('user = ?', 'peterz')</code></pre>

<pre><code># List all changes for table 'accounts'
ChangeLogs.where('table_name = ?', 'accounts')</code></pre>   

    4. *Turn ChangeLogs off in testing environment*
You can globally turn it off for your testing.
<pre><code># config/environment.rb
ChangeLog.enabled = false if Rails.env.test?
</code></pre>

    5. *Database and table name*
change_log gem can save changes into separate database from the main application. 
The database could be MySQL, SQLite or any other database that active record is happy to connect with.

Here is an example of database.yml when using separate database for 'change_logs':
<pre><code>change_logs:
  adapter: mysql2
  encoding: utf8
  database: change_logs
  username: username
  password: ********
  host: hostname
  port: 3306
</code></pre>

And also you need to tell change_log gem to establish the connection.
<pre><code># config/environment.rb
ChangeLogs.establish_connection(:change_logs)
</code></pre>

Table name is also configurable. Instead of 'change_logs', choose your preferred table name and run the migration.
Just remember in your environment.rb file, you need to tell change_log gem 
what is your table name:

<pre><code># config/environment.rb
ChangeLogs.table_name :hr_maintenances
</code></pre>


h2. Wish List
    Please email me if you have any enquiry.


h3. Author
----

Peter Zhang at NCS Software Ltd New Zealand.
Email: peterz@ncs.co.nz

Copyright (c) 2013 Peter Zhang and NCS Software LTD, released under the MIT license
